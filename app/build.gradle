plugins {
    id 'com.android.application'
    id 'jacoco'
    id 'com.github.kt3k.coveralls'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}

def Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.huynd.skyobserver"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.huynd.skyobserver.AndroidTestRunner"
        manifestPlaceholders = [HOCKEYAPP_APP_ID: "8ea0cedf08c94aeda28932f1e409ac50"]

        buildConfigField "String", "API_URL", "\"https://www.atadi.vn/\""
        buildConfigField "String", "ICON_URL", "\"https://www.atadi.vn/img/providers/\""
        buildConfigField "String", "HEADER_CONTENT_TYPE", properties.getProperty("headers.contentType", "\"\"")
    }

    dataBinding {
        enabled true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

androidExtensions {
    experimental = true
}

jacoco {
    toolVersion "0.8.1"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation 'com.github.twinkle942910:monthyearpicker:0.0.1'

    // dagger
    implementation 'com.google.dagger:dagger:2.17'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.17'
    androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:2.17'
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:2.2.2') {
        exclude module: 'espresso-core'
        exclude module: 'support-v4'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
        exclude module: 'support-annotations'
        exclude module: 'design'
    }

    androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'

    // Retrofit
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.0'
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    // RxAndroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.3'

    // RxBinding
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding-support-v4:2.0.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.0.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'

    // lombok
    implementation 'org.projectlombok:lombok:1.16.20'
    annotationProcessor 'org.projectlombok:lombok:1.16.20'

    // coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0-M2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0-M2'

    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.40'
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.40'
    testImplementation 'org.jetbrains.kotlin:kotlin-test:1.1.4-3'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.1.4-3'

    // mockito
    androidTestImplementation 'org.mockito:mockito-core:2.25.0'
    testImplementation 'org.mockito:mockito-core:2.25.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.25.0'

    // unit test
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.2'
    testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'
}

task jacocoTestReport(type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/*$ViewBinder*.*',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'com/android/databinding/**/*.*',
                      'com/huynd/skyobserver/databinding/*.*',
                      'com/huynd/skyobserver/BR.*',
                      'android/**/*.*',
                      '**/*MembersInjector*.*',
                      '**/*DaggerApplicationComponent*.class',
                      '**/*Dagger*Component*.class',
                      'com/huynd/skyobserver/dagger/**/*.*',
                      'com/huynd/skyobserver/entities/**/*.*']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def debugTreeKotlin = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree, debugTreeKotlin])
    executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
}

tasks.coveralls {
    onlyIf { System.getenv("COVERALLS_REPO_TOKEN") }
}
