plugins {
    id 'com.android.application'
    id 'jacoco'
    id 'com.github.kt3k.coveralls'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}

def Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.huynd.skyobserver"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.huynd.skyobserver.AndroidTestRunner"
        manifestPlaceholders = [HOCKEYAPP_APP_ID: "8ea0cedf08c94aeda28932f1e409ac50"]

        buildConfigField "String", "API_URL", "\"https://www.atadi.vn/\""
        buildConfigField "String", "ICON_URL", "\"https://www.atadi.vn/img/providers/\""
        buildConfigField "String", "HEADER_CONTENT_TYPE", properties.getProperty("headers.contentType", "\"\"")
    }

    dataBinding {
        enabled true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

androidExtensions {
    experimental = true
}

jacoco {
    toolVersion "0.8.1"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps.support.appcompat
    implementation deps.support.cardview
    implementation deps.support.supportv4
    implementation deps.support.constraint_layout

    implementation deps.twinkle942910.monthyearpicker

    // dagger
    implementation deps.dagger.dagger
    annotationProcessor deps.dagger.compiler
    androidTestAnnotationProcessor deps.dagger.compiler
    compileOnly deps.glassfish.annotation

    androidTestImplementation(deps.android_testing.core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation(deps.android_testing.contrib) {
        exclude module: 'espresso-core'
        exclude module: 'support-v4'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
        exclude module: 'support-annotations'
        exclude module: 'design'
    }

    // Retrofit
    implementation deps.google.gson
    implementation deps.retrofit.retrofit
    implementation deps.retrofit.convert_gson
    implementation deps.retrofit.adapter_rxjava2
    implementation deps.okhttp.okhttp
    implementation deps.okhttp.logging_interceptor

    // RxAndroid
    implementation deps.reactivex.rxandroid
    implementation deps.reactivex.rxjava

    // RxBinding
    implementation deps.rxbinding.rxjava
    implementation deps.rxbinding.support
    implementation deps.rxbinding.appcompat

    // Glide
    implementation deps.bumptech.glide

    // lombok
    implementation deps.projectlombok.lombok
    annotationProcessor deps.projectlombok.lombok

    // coroutines
    implementation deps.kotlinx.coroutines_core
    implementation deps.kotlinx.coroutines_android

    // kotlin
    implementation deps.kotlin.stdlib
    testImplementation deps.kotlin.stdlib
    testImplementation deps.kotlin.test
    testImplementation deps.kotlin.test_junit

    // mockito
    testImplementation deps.mockito.core
    androidTestImplementation deps.mockito.core
    androidTestImplementation deps.mockito.dexmaker
    androidTestImplementation deps.mockito.mockito_kotlin

    // unit test
    testImplementation deps.unit_testing.junit
    testImplementation deps.unit_testing.robolectric
    testImplementation deps.unit_testing.robolectric_shadows_support
}

task jacocoTestReport(type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/*$ViewBinder*.*',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'com/android/databinding/**/*.*',
                      'com/huynd/skyobserver/databinding/*.*',
                      'com/huynd/skyobserver/BR.*',
                      'android/**/*.*',
                      '**/*MembersInjector*.*',
                      '**/*DaggerApplicationComponent*.class',
                      '**/*Dagger*Component*.class',
                      'com/huynd/skyobserver/dagger/**/*.*',
                      'com/huynd/skyobserver/entities/**/*.*']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def debugTreeKotlin = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree, debugTreeKotlin])
    executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
}

tasks.coveralls {
    onlyIf { System.getenv("COVERALLS_REPO_TOKEN") }
}
